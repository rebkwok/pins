"""
Django settings for pins project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import environ
import logging
import os
import sys

from pathlib import Path

from .custom_logging import GroupWriteRotatingFileHandler, log_file_permissions

logging.handlers.GroupWriteRotatingFileHandler = GroupWriteRotatingFileHandler


root = environ.Path(__file__) - 2  # two folders back (/a/b/ - 3 = /)

# defaults
env = environ.Env(DEBUG=(bool, False),
                  SHOW_DEBUG_TOOLBAR=(bool, False),
                  USE_MAILCATCHER=(bool, False),
                  LOCAL=(bool, False),
                  TESTING=(bool, False),
                  CI=(bool, False),
                  LOCAL_S3=(bool, False)
                  )

environ.Env.read_env(root('pins/.env'))  # reading .env file

TESTING = env("TESTING")
if not TESTING:  # pragma: no cover
    TESTING = any([test_str in arg for arg in sys.argv for test_str in ["test", "pytest"]])

BASE_DIR = root()
PROJECT_DIR = root("pins")
#
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
if SECRET_KEY is None:  # pragma: no cover
    print("No secret key!")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
# when env variable is changed it will be a string, not bool
if str(DEBUG).lower() in ['true', 'on']:  # pragma: no cover
    DEBUG = True
else:  # pragma: no cover
    DEBUG = False

DOMAIN = "podencosinneed.org"
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[DOMAIN, f'www.{DOMAIN}'])
# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-CSRF_TRUSTED_ORIGINS
CSRF_TRUSTED_ORIGINS = [f'https://{host}' for host in ALLOWED_HOSTS]

if env('LOCAL'):  # pragma: no cover
    ALLOWED_HOSTS = ['*']


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    "home",
    "search",
    "dashboard",
    "django_extensions",
    "django_ses",
    "wagtail.contrib.search_promotions",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.contrib.settings",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail_modeladmin",
    "wagtail",
    "modelcluster",
    "taggit",
    "storages",
    "django_recaptcha",
    "wagtailcaptcha",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.forms",
    "allauth",
    "allauth.account",
    "encrypted_json_fields",
    "wagtail_json_widget",
    "dogs",
    "fundraising",
    "crispy_forms",
    "crispy_bootstrap5",
    "paypal.standard.ipn",
    "payments",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

# Auth stuff

SITE_ID = 1

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
ACCOUNT_PRESERVE_USERNAME_CASING = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_USERNAME_BLACKLIST = ["admin", "god"]
# We're going to want to collect extra info
ACCOUNT_FORMS = {'signup': 'dashboard.forms.PINSSignupForm'}


ROOT_URLCONF = "pins.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(PROJECT_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "wagtail.contrib.settings.context_processors.settings",
                "home.context_processors.home",
                "fundraising.context_processors.recipes",
            ],
        },
    },
]

WSGI_APPLICATION = "pins.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': env.db(),
    # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-GB"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Date formats
DATE_FORMAT = "d-M-Y"
SHORT_DATETIME_FORMAT = "d-M-Y H:i"
SHORT_DATE_FORMAT = "d-M-Y"


if TESTING or env('CI'):  # use local cache for tests
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'test-pins',
        }
    }
else:  # pragma: no cover
    CACHES = {
        "default": {
            "BACKEND": 'django.core.cache.backends.filebased.FileBasedCache',
            "LOCATION": root("cache"),
        }
    }

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# JavaScript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/4.2/ref/contrib/staticfiles/#manifeststaticfilesstorage
# STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
}

if TESTING or (env("LOCAL")  and not env("LOCAL_S3", False)):
    # use default storage backend in tests/local
    STORAGES["default"]["BACKEND"] = "django.core.files.storage.FileSystemStorage"

# for media storage with s3
AWS_STORAGE_BUCKET_NAME = f"media.{DOMAIN}"

if env("LOCAL", False) or env("LOCAL_S3", False):
    AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY")

# Disables signing of the S3 objects' URLs. When set to True it
# will append authorization querystring to each URL.
AWS_QUERYSTRING_AUTH = False

# Do not allow overriding files on S3 as per Wagtail docs recommendation:
# https://docs.wagtail.io/en/stable/advanced_topics/deploying.html#cloud-storage
# Not having this setting may have consequences such as losing files.
AWS_S3_FILE_OVERWRITE = False

# Default ACL for new files should be "private" - not accessible to the
# public. Images should be made available to public via the bucket policy,
# where the documents should use wagtail-storages.
AWS_DEFAULT_ACL = "private"

# only if using cloudfront
AWS_S3_CUSTOM_DOMAIN = env.str("AWS_S3_CUSTOM_DOMAIN", "")
AWS_S3_REGION_NAME = "eu-west-1"


# This settings lets you force using http or https protocol when generating
# the URLs to the files. Set https as default.
# https://github.com/jschneier/django-storages/blob/10d1929de5e0318dbd63d715db4bebc9a42257b5/storages/backends/s3boto3.py#L217
AWS_S3_URL_PROTOCOL = env.str("AWS_S3_URL_PROTOCOL", "http:")

STATIC_ROOT = os.path.join(BASE_DIR, "collected-static")
STATIC_URL = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"  # note ignored if using S3 storage; should only be used in tests


# Email
if env("LOCAL") or env("CI"):
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:  # pragma: no cover
    EMAIL_BACKEND = 'django_ses.SESBackend'
    AWS_SES_ACCESS_KEY_ID = env('AWS_SES_ACCESS_KEY_ID')
    AWS_SES_SECRET_ACCESS_KEY = env('AWS_SES_SECRET_ACCESS_KEY')
    AWS_SES_REGION_NAME=env('AWS_SES_REGION_NAME')
    AWS_SES_REGION_ENDPOINT=env('AWS_SES_REGION_ENDPOINT')

DEFAULT_FROM_EMAIL = 'web@podencosinneed.org'
SUPPORT_EMAIL = 'rebkwok@gmail.com'
DEFAULT_ADMIN_EMAIL = "info@podencosinneed.org"
SERVER_EMAIL = SUPPORT_EMAIL

# MAILCATCHER
if env('USE_MAILCATCHER'):  # pragma: no cover
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = '127.0.0.1'
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    EMAIL_PORT = 1025
    EMAIL_USE_TLS = False


# #####LOGGING######
if not TESTING and not env("LOCAL"):  # pragma: no cover
    LOG_FOLDER = env('LOG_FOLDER')
    LOG_FILE = os.path.join(LOG_FOLDER, 'pins.log')
    log_file_permissions(LOG_FILE)

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '[%(levelname)s] - %(asctime)s - %(name)s - '
                          '%(message)s',
                'datefmt': '%Y-%m-%d %H:%M:%S',
            }
        },
        'handlers': {
            'file_app': {
                'level': 'INFO',
                'class': "logging.handlers.GroupWriteRotatingFileHandler",
                'filename': LOG_FILE,
                'maxBytes': 1024*1024*5,  # 5 MB
                'backupCount': 5,
                'formatter': 'verbose'
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose'
            },
            'mail_admins': {
                'level': 'ERROR',
                'class': 'django.utils.log.AdminEmailHandler',
                'include_html': True,
            },
        },
        'loggers': {
            '': {
                'handlers': ['console', 'file_app', 'mail_admins'],
                'propagate': True,
            },
            'django.request': {
                'handlers': ['console', 'file_app', 'mail_admins'],
                'propagate': True,
            },
            'home': {
                'handlers': ['console', 'file_app', 'mail_admins'],
                'level': 'INFO',
                'propagate': False,
            },
            'dogs': {
                'handlers': ['console', 'file_app', 'mail_admins'],
                'level': 'INFO',
                'propagate': False,
            },
            'dashboard': {
                'handlers': ['console', 'file_app', 'mail_admins'],
                'level': 'INFO',
                'propagate': False,
            },
            'search': {
                'handlers': ['console', 'file_app', 'mail_admins'],
                'level': 'INFO',
                'propagate': False,
            },
            "shop": {
                "handlers": ["console", "file_app", "mail_admins"],
                "level": "INFO",
                "propagate": False,
            },
        },
    }
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
            }
        },
        'loggers': {
            'django.request': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': True,
            },
            'home': {
                'handlers': ['console'],
                'level': 'INFO',
                'propogate': True,
            },
            'dogs': {
                'handlers': ['console'],
                'level': 'INFO',
                'propogate': True,
            },
            'dashboard': {
                'handlers': ['console'],
                'level': 'INFO',
                'propogate': True,
            },
            'search': {
                'handlers': ['console'],
                'level': 'INFO',
                'propogate': True,
            },
        },
    }

ADMINS = [("Becky Smith", SUPPORT_EMAIL)]

# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

INTERNAL_IPS = ('127.0.0.1', '10.0.2.2')


# Session cookies
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_AGE = 604800  # 1 week

if env('LOCAL') or TESTING:
    SESSION_COOKIE_SECURE = False
else:  # pragma: no cover
    SESSION_COOKIE_SECURE = True


# Wagtail settings

WAGTAIL_SITE_NAME = "pins"

# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
WAGTAILADMIN_BASE_URL = f"https://{DOMAIN}"

WAGTAILIMAGES_JPEG_QUALITY = 65
WAGTAILIMAGES_WEBP_QUALITY = 65

# backup
S3_LOG_BACKUP_PATH = "s3://backups.polefitstarlet.co.uk/pins_activitylogs"
S3_LOG_BACKUP_ROOT_FILENAME = "pins_activity_logs_backup"

# FACEBOOK
FB_APP_ID = env.str("FB_APP_ID")
FB_PAGE_ID = env.str("FB_PAGE_ID")
FB_APP_SECRET = env.str("FB_APP_SECRET")
FB_ACCESS_TOKEN = env.str("FB_ACCESS_TOKEN")
FB_ACCESS_TOKEN_PATH = Path(PROJECT_DIR) / ".fb_access_token"


# RECAPTCHA
if not TESTING:  # pragma: no cover
    RECAPTCHA_PUBLIC_KEY = env.str("RECAPTCHA_PUBLIC_KEY", "")
    RECAPTCHA_PRIVATE_KEY = env.str("RECAPTCHA_PRIVATE_KEY", "")
    NOCAPTCHA = True

# silence the test key check for management commands
SILENCED_SYSTEM_CHECKS = ['captcha.recaptcha_test_key_error']

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

# PAYPAL
PAYPAL_TEST = env.bool("PAYPAL_TEST", False)
# In paypal test mode, this can be optionally set to an ngrok-type domain
# e.g.  https://d45c-81-187-158-175.ngrok-free.app for testing paypal callbacks
PAYPAL_TEST_CALLBACK_DOMAIN = env.str("PAYPAL_TEST_CALLBACK_DOMAIN", "")
PAYPAL_EMAIL = env.str("PAYPAL_EMAIL")
# A key we define ourselves, to verify paypal return items
PAYPAL_CUSTOM_KEY = env.str("PAYPAL_CUSTOM_KEY")
PAYPAL_BUY_BUTTON_IMAGE = "/static/images/paypal-button.png"


# Encrypted models
FIELD_ENCRYPTION_KEY=env.str("FIELD_ENCRYPTION_KEY")
EJF_ENCRYPTION_KEYS = FIELD_ENCRYPTION_KEY

PDF_ENCRYPTION_KEY=env.str("PDF_ENCRYPTION_KEY")

RECIPE_SUBMISSIONS_OPEN=env.bool("RECIPE_SUBMISSIONS_OPEN", default=False)


# Image uploads
WAGTAILIMAGES_EXTENSIONS =  ["jpg", "jpeg", "png"]
